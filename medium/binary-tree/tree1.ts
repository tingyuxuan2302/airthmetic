// 题目：不同的二叉搜索树
// 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。

//  

// 示例 1：


// 输入：n = 3
// 输出：5
// 示例 2：

// 输入：n = 1
// 输出：1
//  

// 提示：

// 1 <= n <= 19

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/unique-binary-search-trees
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 思路：数组有i个节点，比如【1，2，3，4，5】，从其中任取一个数字作为根节点， 则剩下i - 1 个节点构建左、右子树，如果左边有j个节点，则右边有i - j- 1个节点
// 当 n = 0时，构建一个空树
// 当n = 1时，构建一个单节点的树

function numTrees(n: number) : number {
  // 因为0个节点和1个节点都只能构建成一个树，n最小值是0，因此初始化为至少数组是1个，n + 1
  const dp = new Array(n + 1).fill(0)
  dp[0] = 1
  dp[1] = 1
  // 从2开始叠加, i作为n的副本，被n控制大小
  for (let i = 2; i <= n; i++) {
    // 构建左右子树的个数
    for(let j = 0; j <= i - 1; j++) {
      // 左树个数 * 右数个数
      dp[i] += dp[j] * dp[i - j - 1]
    }
  }
  return dp[n]
}